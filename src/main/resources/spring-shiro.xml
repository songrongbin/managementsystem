<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!--<description>== Shiro Components ==</description>-->
    
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

	<!-- 会话Cookie模板 -->
	<!--<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
		<!--cookie的name，我故意取名叫xxxxbaidu -->
	<!--<constructor-arg value="v_v-s-baidu"/>-->
	<!--<property name="httpOnly" value="true"/>-->
	    <!--cookie的有效时间 -->
	<!--<property name="maxAge" value="-1"/>-->
	    <!-- 配置存储Session Cookie的domain为 一级域名
	    <property name="domain" value=".itboy.net"/>
	     -->
	<!--</bean>-->
	<!-- custom shiro session listener -->
	<!--<bean id="customSessionListener" class="com.sojson.core.shiro.listenter.CustomSessionListener">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	</bean>-->
	<!-- 用户信息记住我功能的相关配置 -->
	<!--<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="v_v-re-baidu"/>
	    <property name="httpOnly" value="true"/>-->
	    <!-- 配置存储rememberMe Cookie的domain为 一级域名
	    <property name="domain" value=".itboy.net"/>
	     -->
	<!--<property name="maxAge" value="2592000"/><!- 30天时间，记住我30天 -->
	<!--</bean>-->

    <!-- rememberMe管理器 -->
    <!--<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
	<!--<property name="cipherKey"
              value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
    <property name="cookie" ref="rememberMeCookie"/>
</bean>-->


<!-- custom shiro session listener -->
	<bean id="customShiroSessionDAO" class="com.bins.managementsystem.shiro.session.CustomShiroSessionDAO">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!-- 手动操作Session，管理Session -->
	<bean id="customSessionManager" class="com.bins.managementsystem.shiro.session.CustomSessionManager">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
		 <property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
	</bean>
 
	<!-- 会话验证调度器 -->
	<!--<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">-->
		 <!-- 间隔多少时间检查，不配置是60分钟 -->
	<!--<property name="interval" value="${session.validate.timespan}"/>
    <property name="sessionManager" ref="sessionManager"/>
</bean>-->
<!-- 安全管理器 -->
	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="sampleRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="customShiroCacheManager"/>
    </bean>-->
    <!-- 用户缓存 -->
	<!--<bean id="customShiroCacheManager" class="com.sojson.core.shiro.cache.impl.CustomShiroCacheManager">
	    <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean>-->
	
	<!-- shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
	<bean id="jedisShiroCacheManager" class="com.bins.managementsystem.shiro.cache.impl.JedisShiroCacheManager">
	    <property name="jedisManager" ref="jedisManager"/>
	</bean>
	<!-- redis 的缓存 -->
	<bean id="jedisManager" class="com.bins.managementsystem.shiro.cache.JedisManager">
	    <property name="jedisPool" ref="jedisPool"/>
	</bean>
	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>-->
	<!-- session 校验单个用户是否多次登录 -->
	<!--<bean id="kickoutSessionFilter"   class="com.sojson.core.shiro.filter.KickoutSessionFilter">
	    <property name="kickoutUrl" value="/u/login.shtml?kickout"/>  
	</bean>  -->
	<!-- 静态注入 jedisShiroSessionRepository-->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="com.bins.managementsystem.shiro.filter.KickoutSessionFilter.setShiroSessionRepository"/>
	    <property name="arguments" ref="jedisShiroSessionRepository"/>
	</bean>
	
	<!-- 授权 认证 -->
	<bean id="userRealm" class="com.bins.managementsystem.shiro.token.UserRealm" ></bean>

	
	<!-- Session Manager -->
	<!--<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">-->
		<!-- 相隔多久检查一次session的有效性   -->
	<!--<property name="sessionValidationInterval" value="1800000"/>  -->
	 	 <!-- session 有效时间为半小时 （毫秒单位）-->
	<!--<property name="globalSessionTimeout" value="1800000"/>-->
	<!--<property name="sessionDAO" ref="customShiroSessionDAO"/>-->
	   <!-- session 监听，可以多个。 -->
	<!--<property name="sessionListeners">
        <list>
            <ref bean="customSessionListener"/>
        </list>
 </property>-->
	   <!-- 间隔多少时间检查，不配置是60分钟 -->
	<!--<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>-->
	  <!-- 是否开启 检测，默认开启 -->
	<!--<property name="sessionValidationSchedulerEnabled" value="true"/>-->
	   <!-- 是否删除无效的，默认也是开启 -->
	<!--<property name="deleteInvalidSessions" value="true"/>-->
		<!-- 会话Cookie模板 -->
	<!--<property name="sessionIdCookie" ref="sessionIdCookie"/>
 </bean>-->
	<!-- session 创建、删除、查询 -->
		<bean id="jedisShiroSessionRepository" class="com.bins.managementsystem.shiro.cache.JedisShiroSessionRepository" >
             <property name="jedisManager" ref="jedisManager"/>
        </bean>

	<!--
		自定义角色过滤器 支持多个角色可以访问同一个资源 eg:/home.jsp = authc,roleOR[admin,user]
		用户有admin或者user角色 就可以访问
	-->
	
	<!-- 认证数据库存储-->
	<!--<bean id="shiroManager" class="com.sojson.core.shiro.service.impl.ShiroManagerImpl"/>
    <bean id="login" class="com.sojson.core.shiro.filter.LoginFilter"/>
    <bean id="role" class="com.sojson.core.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.sojson.core.shiro.filter.PermissionFilter"/>
    <bean id="simple" class="com.sojson.core.shiro.filter.SimpleAuthFilter"/>-->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->
		<property name="loginUrl" value="/user/login.shtml"/>
		<!-- 登录成功后要跳转的连接 -->
		<property name="successUrl" value="/index.html"/>
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/user/login.shtml"
		/>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				/statics/**=anon
				/user/login.shtml=anon
				/user/register.shtml=anon
				/user/submitLogin.shtml=anon
				/sys/schedule.html=perms[sys:schedule:save]
				/sys/login=anon
				/captcha.jpg=anon
				/**=authc
			</value>
		</property>
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm"/>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 开启shiro注解 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	
	
	<!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
		<!--<property name="securityManager" ref="securityManager" />-->
	<!--<property name="loginUrl" value="/u/login.shtml" />-->
		<!--	TODO 待提取	-->
	<!--<property name="successUrl" value="/" />-->
	<!--<property name="unauthorizedUrl" value="/?login" />-->
		
<!--	初始配置，现采用自定义	-->
<!--		<property name="filterChainDefinitions" >-->
<!--			<value>-->
<!--				/** = anon-->
<!--				/page/login.jsp = anon-->
<!--				/page/register/* = anon-->
<!--				/page/index.jsp = authc-->
<!--				/page/addItem* = authc,roles[数据管理员]-->
<!--				/page/file* = authc,roleOR[普通用户,数据管理员]-->
<!--				/page/listItems* = authc,roleOR[数据管理员,普通用户]-->
<!--				/page/showItem* = authc,roleOR[数据管理员,普通用户]-->
<!--				/page/updateItem*=authc,roles[数据管理员]-->
<!--            </value>-->
<!--		</property>-->
		<!-- 读取初始自定义权限内容-->
       <!--<property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/> -->
	<!--<property name="filters">
        <util:map>
           <entry key="login" value-ref="login"></entry>-->
           <!--<entry key="role" value-ref="role"></entry>
           <entry key="simple" value-ref="simple"></entry>
           <entry key="permission" value-ref="permission"></entry>
           <entry key="kickout" value-ref="kickoutSessionFilter"></entry>-->
	<!--</util:map>
</property>
</bean>-->

<!-- Shiro生命周期处理器-->
	<!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />-->
	
	
	<!-- ============================================================================ -->

</beans>

